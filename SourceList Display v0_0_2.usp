/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Netrix LLC
System Name:
System Number:
Programmer: bjo
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "SourceList Display v0_0_2"
// #HINT ""
#DEFINE_CONSTANT MAX_SOURCES 24
#DEFINE_CONSTANT MAX_CHARS 64
#DEFINE_CONSTANT MAX_DTVS 2
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND


#OUTPUT_SHIFT 32 
#HELP_PDF_FILE "SourceList Display v0_0_2 Help.pdf"
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
                    
/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_;
DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_;
DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_;
DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_;

DIGITAL_INPUT diInitSourceList;
DIGITAL_INPUT _skip_;
DIGITAL_INPUT diRoom_Off;
DIGITAL_INPUT diPRS_Select;							//Presentation Default
DIGITAL_INPUT diVTC_Select;							//Video Conferencing Default
DIGITAL_INPUT diATV_Select;							//AppleTV Default
DIGITAL_INPUT diDTV_Select[MAX_DTVS];				//Television Default
DIGITAL_INPUT _skip_;
DIGITAL_INPUT diPRS_Source_Select[MAX_SOURCES];		//Presentation Source 
DIGITAL_INPUT _skip_;
DIGITAL_INPUT diDM_Video_Detected[MAX_SOURCES];		//from DM Video Detected 
DIGITAL_INPUT _skip_,_skip_;
ANALOG_INPUT  aiDM_PRS_Source_Fb;					//from DM VideoOut Feedback
ANALOG_INPUT _skip_,_skip_,_skip_;
STRING_INPUT siSourceName$[MAX_SOURCES][MAX_CHARS];	//Names from SimplWindows 
// BUFFER_INPUT 

DIGITAL_OUTPUT _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_;
ANALOG_OUTPUT aoNumOfListItems;						//Number of Source List Items
ANALOG_OUTPUT aoDM_PRS_Source;						//DM Presentation Source Selection 
ANALOG_OUTPUT _skip_;
STRING_OUTPUT soCurrent_Source$;					//Current DM Presentation Source Name
STRING_OUTPUT _skip_;
DIGITAL_OUTPUT doPRS_Source_Select_Fb[MAX_SOURCES];	//Presentation Source Select Feedback
DIGITAL_OUTPUT _skip_;
DIGITAL_OUTPUT doPRS_Source_Enable_Fb[MAX_SOURCES];	//DM Presentation Source Enable
DIGITAL_OUTPUT _skip_;

STRING_OUTPUT soSourceListNames$[MAX_SOURCES];		//Names for Source List 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER DM_INPUT[MAX_SOURCES];
INTEGER_PARAMETER PRS_DEFAULT_SOURCE;
INTEGER_PARAMETER VTC_DEFAULT_SOURCE;
INTEGER_PARAMETER DTV_DEFAULT_SOURCE[MAX_DTVS];
INTEGER_PARAMETER ATV_DEFAULT_SOURCE;

// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
//STRING_PARAMETER DEV_NUMBER[1],INST_ID[4],INDEX_1[2];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES DM_INPUT
	
	propDefaultValue = 0d;

#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER nSourceInput[MAX_SOURCES];
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING cSourceName$[MAX_SOURCES][MAX_CHARS];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function fnUpdateEnabledItems()
{
 	Integer i;
 	
 	for(i = 1 to MAX_SOURCES)
 	{
 		if(nSourceInput[i] > 0 && nSourceInput[i] <= MAX_SOURCES)
 		{
 			doPRS_Source_Enable_Fb[i] = diDM_Video_Detected[nSourceInput[i]];
 			
 			trace("setting source %u enable to: %u\n",i,nSourceInput[i]);				
 		}
 	}
}

Function fnUpdateEnabledItemsDelay()
{
	wait(20,wUpdateEnabledItems)
	{
		fnUpdateEnabledItems();
	} 	
}

Function fnUpdateEnabledItemsRequest()
{
 	cancelwait(wUpdateEnabledItems);
 	fnUpdateEnabledItemsDelay();
}

Function fnInitSourceList()
{
	Integer i;

	FOR(i = 1 to MAX_SOURCES)
	{		
    	IF(DM_INPUT[i] = 0)
		{
        	BREAK;
		}
		ELSE
		{
        	aoNumOfListItems = (i + 1) - 1;
			nSourceInput[i] = DM_INPUT[i];
			TRACE("nSourceInput[%u]=%u",i,nSourceInput[i]);
			//soSourceListNames$[i] = cSourceName$[DM_INPUT[i]]; 
			MAKESTRING(soSourceListNames$[i],"%s",cSourceName$[DM_INPUT[i]]); 
		}
	}
	
	fnUpdateEnabledItemsRequest();
}

Function fnMake_PRS_Source_Fb(INTEGER fnLastSource)
{
	SETARRAY(doPRS_Source_Select_Fb,0);
	doPRS_Source_Select_Fb[fnLastSource] = 1;

	soCurrent_Source$ = cSourceName$[nSourceInput[fnLastSource]];
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH diInitSourceList
{
	fnInitSourceList();
}

PUSH diRoom_Off
{
	aoDM_PRS_Source = 0;  
	soCurrent_Source$ = "";
	fnMake_PRS_Source_Fb(0);
}

PUSH diPRS_Select
{
	aoDM_PRS_Source = PRS_DEFAULT_SOURCE;
}

PUSH diVTC_Select
{
	aoDM_PRS_Source = VTC_DEFAULT_SOURCE;
}

PUSH diDTV_Select
{
	INTEGER idx;
	idx = GETLASTMODIFIEDARRAYINDEX();
	aoDM_PRS_Source = DTV_DEFAULT_SOURCE[idx];
}

PUSH diATV_Select
{
	aoDM_PRS_Source = ATV_DEFAULT_SOURCE;
}
    
PUSH diPRS_Source_Select
{
	INTEGER idx;
	idx = GETLASTMODIFIEDARRAYINDEX();
	
	//aoDM_PRS_Source = DM_INPUT[idx];
	aoDM_PRS_Source = nSourceInput[idx];

	fnMake_PRS_Source_Fb(idx);
}

CHANGE aiDM_PRS_Source_Fb
{
	Integer i;	
	SETARRAY(doPRS_Source_Select_Fb,0);
     
    IF(aiDM_PRS_Source_Fb > 0)
    {
		FOR(i = 0 to MAX_SOURCES)
		{
	    	IF(aiDM_PRS_Source_Fb = nSourceInput[i])
			{
				fnMake_PRS_Source_Fb(i);
			}
		}	    
	}
}

CHANGE diDM_Video_Detected
{
	/*Integer i;
	INTEGER idx;
	idx = GETLASTMODIFIEDARRAYINDEX();
	
	TRACE("Last diDM_Video_Detected=%u",idx);

	FOR(i = 0 to MAX_SOURCES)
	{
    	IF(idx = nSourceInput[i])
		{
			doPRS_Source_Enable_Fb[i] = diDM_Video_Detected[idx];
		}
	}*/
	
	fnUpdateEnabledItemsRequest();	
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	Integer i;
	SETARRAY(nSourceInput,0);
	SETARRAY(doPRS_Source_Enable_Fb,0);
	aoNumOfListItems = 0;


    WaitForInitializationComplete();
	
	FOR(i = 0 to MAX_SOURCES)
	{
		IF(LEN(siSourceName$[i]))
		{
			cSourceName$[i] = siSourceName$[i];
		}
	}
	DELAY(500);
	fnInitSourceList();
}


